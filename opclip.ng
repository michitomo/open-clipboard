/**
 * open-clipboard 1.0.1
 * shares your clipboard image through local web server.
 *
 * because communicator can't share images.
 *
 * by hinox
 * * * * * */

Object.prototype.def = {
    title : "open-clipboard 1.0.1",

    /***** you may need to edit from here *****/
    use_httpd     : true,         // if httpd is prepared by yourself -> httpd : false,
    document_root : "C:\\nil\\",  // the directory that will be public
    page_path     : "clip\\",     // for extra path. "\\" or "/" at the end and for the separator.
    /***** you may need to edit to here *****/

    cur_dir       : Main.scriptDirectory + "\\",
    header_html   : "header.html",
    footer_html   : "footer.html",
    on_img        : "on.ico",
    off_img       : "off.ico",

    host_name     : System.computer.host + "/", // hostname or IP address
    index_html    : "index.html",
    clip_img      : "img.png",

    timeout : 3600000 // ms
};

Object.prototype.util = {
    header_html : (new File(this.def.cur_dir + this.def.header_html)),
    footer_html : (new File(this.def.cur_dir + this.def.footer_html)),

    clip  : require("Clipboard").Clipboard,
    icon  : require("Image").Icon,
    httpd : require("HTTPD").HTTPD,

    fill_zero : function(num, digit){
        var str = "" + num;
        while(str.length < digit){
            str = "0" + str;
        }
        return str;
    },

    rand_str : function(len, symbols){
        var str = "";
        var list = "0123456789"
            + "abcdefghijklmnopqrstuvwxyz";
        if(symbols){
            list += '!"#$%&\'()-=^~\\|@`[{;+:*]},<.>/?_';
        }
        list.split("");
        for(var i=0; i<len; i++){
            str += list[Math.floor(Math.random() * list.length)];
        }
        return str;
    },

    get_time : function(){
        var t = new Date();
        return this.util.fill_zero(t.getFullYear(),          4)
            + "-" + this.util.fill_zero(t.getMonth() + 1,    2)
            + "-" + this.util.fill_zero(t.getDate(),         2)
            + "_" + this.util.fill_zero(t.getHours(),        2)
            + "-" + this.util.fill_zero(t.getMinutes(),      2)
            + "-" + this.util.fill_zero(t.getSeconds(),      2)
            + "-" + this.util.fill_zero(t.getMilliseconds(), 3);
    },

    to_win_path_separator : function(str){
        return str.replace(/\//g,"\\");
    },

    to_unix_path_separator : function(str){
        return str.replace(/\\/g,"/");
    }
};

var opclip = {

    status  : false,

    on_ico  : this.util.icon.load(this.def.cur_dir + this.def.on_img),
    off_ico : this.util.icon.load(this.def.cur_dir + this.def.off_img),

    main : function(){
        Main.createNotifyIcon();
        Main.notifyIcon.icon = this.off_ico;
        Main.notifyIcon.text = this.def.title;

        if(this.def.use_httpd){
            this.run_httpd(this.def.document_root);
        }else{
            this.create_page(this.def.index_html, "");
        }

        var that = this;
        Main.notifyIcon.observe("lbuttonUp", function(){
            that.toggle();
        });

        this.context_menu();
    },

    run_httpd : function(document_root){
        this.util.httpd.create({
            paths : {
                "" : Main.directory.directory(document_root)
            },

            index : function(con)(con.error(404))
        });
    },

    context_menu : function(){
        var that = this;
        Main.addCommands({
            "オン" : function(){ that.on(); },
            "オフ" : function(){ that.off(); }
        });
        Main.notifyIcon.contextMenu.insert(
            null,
            "オン",
            "オフ",
            null
        );
    },

    toggle : function(){
        if(!this.status){
            this.on();
        }else{
            this.off();
        }
    },

    on : function(){
        Main.notifyIcon.icon = this.on_ico;
        this.status = true;
        this.util.clip.observe("change", this.obs_img);
    },

    off : function(){
        Main.notifyIcon.icon = this.off_ico;
        this.status = false;
        this.util.clip.unobserve("change", this.obs_img);
    },

    obs_img : function(){
        if(this.util.clip.hasFormat("image")){
            var time     = this.util.get_time();
            var dir      = opclip.create_dir();
            var img_html = opclip.get_img_html();
            var img      = this.util.clip.image;

            img.save(this.def.document_root
                + this.util.to_win_path_separator(this.def.page_path)
                + dir.rand  + "\\"
                + this.def.clip_img
                , {quality : 100}
            );
            free(img);

            Main.notifyIcon.showInfo(time, "IMAGE shared");

            opclip.create_page(
                dir.rand + "\\" + this.def.index_html,
                this.util.header_html.load() + img_html + this.util.footer_html.load()
            );
            opclip.clear(dir.obj);
            opclip.off();
            this.util.clip.write("text",
                "http://"
                    + this.def.host_name
                    + this.util.to_unix_path_separator(this.def.page_path)
                    + dir.rand
                    + "/");
        }
    },

    create_dir : function(){
        var rand = this.util.rand_str(16, false);
        var dir  = (new Directory(
            this.def.document_root
                + this.util.to_win_path_separator(this.def.page_path)
                + rand
        ));
        dir.create();
        return {rand : rand, obj : dir};
    },

    create_page : function(path, html){
        var index_html = (new File(
            this.def.document_root
                + this.util.to_win_path_separator(this.def.page_path)
                + path
        ));
        index_html.create().update(html);
    },

    get_img_html : function(){
        return "<img src='"+ this.def.clip_img +"'>";
    },

    clear : function(dir){
        setTimeout(function(){
            dir.remove();
        }, this.def.timeout);
    }

};

opclip.main();
